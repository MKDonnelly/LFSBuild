#!/bin/bash

#The very first script to execute.
#This performs the initialization of 
#the lfs build which includes
#   - Creating the ext4 file system on the partition
#   - Mounting the partition
#   - Copying the sources and required scripts over
#   - Calls lfsbuildinittools


#Previous exit if fail. exits the program
#if the last command failed. This is a debugging
#measure to ensure that everything go accordingly.
function peif(){
    if [[ "$?" != "0" ]]
    then
        echo ALERT ALERT ALERT ALERT
        echo SCRIPT FAILED AT
        caller
        echo $1
        exit 1
    fi
}

if [[ "$1" == "" ]]
then
   echo "Usage:
         \$1 = LFS config file (TODO add in summary of options)"
   exit
fi

#Ensure that the host system has the required tools
./lfstoolcheck
peif

#Parse Options From Given Config Files

#All of these options will be explicitly passed to
#lfsbuildinittools and lfsbuildsystem or placed in
#their environment.
LFS=$( cat $1 | grep 'LFS=' | cut -f 2 -d '=' )
ROOT_PASSWD=$( cat $1 | grep 'ROOT_PASSWD=' | cut -f 2 -d '=' )
RUN_TESTS=$( cat $1 | grep 'RUN_TESTS=' | cut -f 2 -d '=' )
MAKEJFLAG=$( cat $1 | grep 'MAKEJFLAG=' | cut -f 2 -d '=' )
PART=$( cat $1 | grep 'PART=' | cut -f 2 -d '=' )
LFS_SOURCES=$( cat $1 | grep 'LFS_SOURCES=' | cut -f 2 -d '=' )
LINUX_CONFIG=$( cat $1 | grep 'LINUX_CONFIG=' | cut -f 2 -d '=' )
SYSTEMD_NET_CONFIG=$( cat $1 | grep 'SYSTEMD_NET_CONFIG=' | cut -f 2 -d '=' )
RESOLV_CONF=$( cat $1 | grep 'RESOLV_CONF=' | cut -f 2 -d '=' )
#Done parsing Options


#Validate options
stat $LFS > /dev/null
peif "LFS DOES NOT EXIST!"

stat $PART > /dev/null
peif "PART DOES NOT EXIST!"

stat $LFS_SOURCES > /dev/null
peif "LFS_SOURCES DIRECTORY DOES NOT EXIST!"

stat $LINUX_CONFIG > /dev/null
peif "LINUX_CONFIG DOES NOT EXIST"

stat $SYSTEMD_NET_CONFIG > /dev/null
peif "SYSTEM_NET_CONFIG DOES NOT EXIST!"

stat $RESOLV_CONF > /dev/null
peif "RESOLV_CONF DOES NOT EXIST!"

#We can either run tests (RUN_TESTS=1) or not run tests
#(RUN_TESTS=0). The argument can ONLY be 1 or 0.
if [[ "$RUN_TESTS" != "0" && "$RUN_TESTS" != "1" ]]
then
   echo "RUN_TESTS ARGUMENT CAN ONLY BE 1 OR 0!"
   exit
fi
#Done validating options


#Setup partition, users, and directories

#Make an ext4 file system on the drive
mkfs.ext4 $PART -F > /dev/null
peif

#Mount the partion on the lfs directory
mkdir -p $LFS
peif
mount $PART $LFS
peif

#Create directories and link
mkdir $LFS/sources $LFS/tools
peif
chmod a+wt $LFS/sources
peif

#Ensure that any previous link is
#deleted before linking.
\rm -Rf /tools
ln -s $LFS/tools /

#Copy over the source packages 
cp -R ${LFS_SOURCES}/* $LFS/sources
peif

#Copy over the scripts to build the initial and final system
cp lfsbuildinittools lfsbuildsystem $LFS
peif

#Copy over the config files for the kernel, systemd, and resolv
#lfsbuildinitools and lfsbuildsystem assume these names.
cp $LINUX_CONFIG $LFS/LINUX_CONFIG
peif
cp $SYSTEMD_NET_CONFIG $LFS/SYSTEMD_NET_CONFIG
peif
cp $RESOLV_CONF $LFS/RESOLV_CONF
peif

#Add the lfs user
groupadd lfs
useradd -s /bin/bash -g lfs -m -k /dev/null lfs

#Make sure the lfs user owns the build directory
chown -R lfs $LFS

#Initilize the environment for the lfs user
echo "exec env -i HOME=/home/lfs TERM=$TERM PS1='\u@\w\$ ' /bin/bash" > /home/lfs/.bash_profile
peif

echo "
set +h
umask 022
LFS=$LFS
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/tools/bin:/bin:/usr/bin
MAKEJFLAG=$MAKEJFLAG
export LFS LC_ALL LFS_TGT PATH MAKEJFLAG
$LFS/lfsbuildinittools &> $LFS/LFSsystemdBuildLogForInitialTools
exit" > /home/lfs/.bashrc
peif
#The line right before the exit calls the script which builds
#the initaial toolchain. Simply logging into the lfs user will
#build the toolchain and exit as the lfs user.

#Make sure lfs owns the config files
chown lfs /home/lfs/{.bashrc,.bash_profile}
peif

echo Building the toolchain
su - lfs
echo Done building the toolchain

#Change ownership of the LFS directory back to root
echo Building the system

#We will setup the directories and chroot here since
#lfsbuildsystem will be called in the chroot. LFS 6.2-
echo -e '\n(6.1) Creating Directories and Entering Chroot\n'
mkdir -pv $LFS/{dev,proc,sys,run}
mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3
mount -v --bind /dev $LFS/dev
mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=620
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run
if [ -h $LFS/dev/shm ]; then
    mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi
chroot "$LFS" /tools/bin/env -i \
       HOME=/root                  \
       TERM="$TERM"                \
       PS1='\u:\w\$ '              \
       PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
       ROOT_PASSWD="$ROOT_PASSWD"   \
       RUN_TESTS="$RUN_TESTS"       \
       MAKEJFLAG="$MAKEJFLAG"       \
       /tools/bin/bash --login +h /lfsbuildsystem &> \
       $LFS/LFSSystemdBuildLogForSystem
peif
echo Done building the system

#The system is build, now configure and clean it

#Create /etc/fstab
echo "$(blkid | grep $PART | cut -f 2 -d ' ' | sed 's/://g') / ext4 defaults 0 1" >> $LFS/etc/fstab
peif

#Add OS information
echo -e 'NAME="Linux From Scratch"
VERSION="8.1-Systemd"
ID=LFS
PRETTY_NAME="Linux From Scratch Version 8.1-Systemd"
VERSION_CODENAME=""' > $LFS/etc/os-release

#Remove the scripts and source code used to build the system
\rm $LFS/{lfsbuildinittools,lfsbuildsystem,lfstoolcheck}
\rm -Rf $LFS/sources

#Remove the lfs user and home directory
userdel -f lfs
rm -Rf /home/lfs

#Unmount the file systems
umount $LFS/{dev/pts,dev,proc,sys,run,}
